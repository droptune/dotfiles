---
- name: Configure workstation
  hosts: localhost
  vars:
    user_bin: /home/{{ ansible_user_id }}/bin
    main_monitor: "DP-1"
    secondary_monitor: "DVI-I-1"
    with_nvchad: true

  tasks:
    - name: Current distr
      ansible.builtin.debug:
        var: ansible_distribution

    - name: Check if we are on laptop
      ansible.builtin.command: cat /sys/class/dmi/id/chassis_type
      changed_when: false
      register: chassis_type
      tags: packages

    - name: Set is_laptop variable for laptops
      ansible.builtin.set_fact:
        is_laptop: true
      when: chassis_type.stdout == "10"

    - name: Set is_laptop variable for desktop
      ansible.builtin.set_fact:
        is_laptop: false
      when: chassis_type.stdout != "10"

    - name: Include ArchLinux tasks
      ansible.builtin.include_tasks: archlinux.yml
      when: ansible_distribution == "Archlinux"
      tags: packages

    - name: Include Debian and Ubuntu tasks
      ansible.builtin.include_tasks: debian.yml
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"
      tags: packages

    - name: Include Fedora tasks
      ansible.builtin.include_tasks: fedora.yml
      when: ansible_distribution == "Fedora"
      tags: packages

    - name: Include SUSE Leap tasks
      ansible.builtin.include_tasks: suse_leap.yml
      when: ansible_distribution == "openSUSE Leap"
      tags: packages

    - name: Install Base utils
      become: true
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - alsa-utils
        - aspell
        - aspell-ru
        - base-devel
        - bat
        - blender
        - btop
        - clang
        - cmake
        - cryptsetup
        - ctags
        - curl
        - direnv
        - emacs
        - filezilla
        - firefox
        - fish
        - flac
        - flameshot
        - flatpak
        - fzf
        - gcc
        - gdu
        - git
        - go
        - gparted
        - jq
        - keepassxc
        - leafpad
        - lsd
        - lxappearance
        - make
        - mediainfo
        - mupdf
        - neovim
        - nitrogen    # wallpaper manager
        - ntfs-3g
        - openvpn
        - pass
        - pipewire-pulse
        - polybar
        - poppler
        - ranger
        - rofi
        - rofi-pass
        - rsync
        - sxiv
        - tasks
        - tealdeer
        - thunar
        - tmux
        - unbound
        - vifm
        - which
        - xorg-xrandr
        - yq
      tags: packages

    - name: Install for other than SuSe
      become: true
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - kitty
        - wipe
        - dnsutils        # dig etc.
      when: ansible_distribution != "openSUSE Leap"

    - name: Enable unbound
      become: true
      ansible.builtin.service:
        name: unbound
        enabled: true

    - name: Install Synaptic driver
      become: true
      ansible.builtin.package:
        name: xf86-input-synaptics
        state: present
      when: is_laptop
      tags: packages

    - name: Install old vim system
      when: not with_nvchad
      block:
        - name: Create .vim directory
          ansible.builtin.file:
            path: /home/{{ ansible_user_id }}/.vim/bundle
            state: directory
            owner: "{{ ansible_user_id }}"
            mode: "0700"

        - name: Install Vundle
          ansible.builtin.git:
            repo: "https://github.com/VundleVim/Vundle.vim.git"
            dest: "/home/{{ ansible_user_id }}/.vim/bundle/Vundle.vim"

    - name: Install oh-my.fish
      ansible.builtin.shell: "curl -L https://get.oh-my.fish | fish"
      args:
        creates: /home/{{ ansible_user_id }}/.oh-my-zsh
      tags: ['never', 'omf']

    - name: Create local bin
      ansible.builtin.file:
        path: "{{ user_bin }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        mode: "0755"

    - name: Install node.js
      become: true
      ansible.builtin.package:
        name: nodejs,npm
        state: present
      when: ansible_distribution != "openSUSE Leap"

    - name: Get npm prefix
      ansible.builtin.command: "npm config get prefix"
      register: npm_prefix
      changed_when: false

    - name: Set npm prefix
      ansible.builtin.command: "npm config set prefix ~/npm"
      when: npm_prefix.stdout != "/home/" + ansible_user_id + "/npm"
      changed_when: true

    - name: Check if ~/bin is in path
      ansible.builtin.command: "echo $PATH"
      register: path_contents
      changed_when: false
      tags: ["never", "after_install"]

    - name: Update fish path
      ansible.builtin.shell: "set -U fish_user_paths $fish_user_paths /home/{{ ansible_user_id }}/bin"
      when: user_bin not in path_contents.stdout
      changed_when: true
      tags: ["never", "after_install"]

    - name: Install global npm modules
      community.general.npm:
        name: "{{ item }}"
        global: true
      with_items:
        - yarn
        - stylus
        - prettier

    - name: Change default shell to fish
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: "/usr/bin/fish"

    - name: Check if NvChad is installed
      ansible.builtin.stat:
        path: /home/pixelduck/.config/nvim/lua/core
      register: nvchad_dir_path
      when: with_nvchad

    - name: Clone NvChad to nvim config directory
      ansible.builtin.git:
        repo: "https://github.com/NvChad/NvChad"
        dest: "/home/{{ ansible_user_id }}/.config/nvim/"
        depth: 1
        force: true
      when: not nvchad_dir_path.stat.exists and with_nvchad

    - name: Create dotfiles directories
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/{{ item }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        mode: "0750"
      with_items:
        - "fish"
        - "fish/conf.d"
        - "i3"
        - "kitty"
        - "nvim"
        - "nvim/lua/custom"
        - "nvim/lua/custom/configs"
        - "polybar"
        - "rofi"
        - "tmux"
        - "vifm"

    - name: Check if dotfiles are already installed
      ansible.builtin.stat:
        path: "/home/{{ ansible_user_id }}/code/dotfiles-install"
      register: dotfiles_install_dir

    - name: Download dotfiles
      when: not dotfiles_install_dir.stat.exists
      block:
        - name: Get dotfiles
          ansible.builtin.git:
            repo: 'https://github.com/droptune/dotfiles.git'
            dest: '/home/{{ ansible_user_id }}/code/dotfiles-install'
            force: true

        - name: Copy dotfiles
          ansible.builtin.copy:
            src: "/home/{{ ansible_user_id }}/code/dotfiles-install/{{ item }}"
            dest: "/home/{{ ansible_user_id }}/{{ item }}"
            owner: "{{ ansible_user_id }}"
            mode: "0640"
          with_items:
            - ".config/fish/conf.d/my.fish"
            - ".config/fish/functions/mkcd.fish"
            - ".config/fish/functions/t.fish"
            - ".config/fish/functions/vf.fish"
            - ".config/i3/app-icons.json"
            - ".config/i3/config"
            - ".config/kitty/kitty.conf"
            - ".config/nvim/lua/custom/chadrc.lua"
            - ".config/nvim/lua/custom/init.lua"
            - ".config/nvim/lua/custom/mappings.lua"
            - ".config/nvim/lua/custom/plugins.lua"
            - ".config/nvim/lua/custom/configs/lspconfig.lua"
            - ".config/nvim/lua/custom/configs/null-ls.lua"
            - ".config/nvim/lua/custom/configs/rust-tools.lua"
            - ".config/rofi/config.rasi"
            - ".config/tmux/tmux-theme.tmux"
            - ".config/tmux/tmux.conf"
            - ".config/vifm/vifmrc"
            - ".gitconfig"

        - name: Copy templated dotfiles
          ansible.builtin.template:
            src: "/home/{{ ansible_user_id }}/code/dotfiles-install/ansible/templates/{{ item.src }}"
            dest: "/home/{{ ansible_user_id }}/{{ item.dest }}"
            owner: "{{ ansible_user_id }}"
            mode: "0640"
          with_items:
            - src: "polybar.ini.j2"
              dest: ".config/polybar/config.ini"

        - name: Copy executable files
          ansible.builtin.copy:
            src: "/home/{{ ansible_user_id }}/code/dotfiles-install/{{ item }}"
            dest: "/home/{{ ansible_user_id }}/{{ item }}"
            owner: "{{ ansible_user_id }}"
            mode: "0754"
          with_items:
            - ".config/tmux/tmux-theme.tmux"
            - "bin/caps.sh"

        - name: Copy executable templated files
          ansible.builtin.template:
            src: "/home/{{ ansible_user_id }}/code/dotfiles-install/ansible/templates/{{ item.src }}"
            dest: "/home/{{ ansible_user_id }}/{{ item.dest }}"
            owner: "{{ ansible_user_id }}"
            mode: "0740"
          with_items:
            - src: "polybar.sh.j2"
              dest: ".config/polybar/launch.sh"

        - name: Copy executable ansible.builtin.files for laptop
          ansible.builtin.copy:
            src: "/home/{{ ansible_user_id }}/code/dotfiles/{{ item }}"
            dest: "/home/{{ ansible_user_id }}/{{ item }}"
            owner: "{{ ansible_user_id }}"
            mode: "0740"
          with_items:
            - "bin/external_display.sh"
            - "bin/tp.sh"
            - "bin/brightness"
          when: is_laptop

    - name: Create dir for photon Rofi theme
      become: true
      ansible.builtin.file:
        path: /usr/share/rofi/themes/photon
        state: directory
        mode: "0755"

    - name: Install Rofi Themes
      become: true
      ansible.builtin.git:
        repo: "https://github.com/anstellaire/photon-rofi-themes"
        dest: "/usr/share/rofi/themes/photon/"
        force: true

    - name: Install i3-workspace-names-daemon
      ansible.builtin.pip:
        name: i3-workspace-names-daemon
        extra_args: --user
      tags: never

    - name: Check if ssh-agent.service ansible.builtin.file exists
      ansible.builtin.stat:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/ssh-agent.service"
      register: ssh_agent_service

    - name: Create local config directory for systemd
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0775"
      when: not ssh_agent_service.stat.exists

    - name: Touch ssh-agent.service ansible.builtin.file
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/ssh-agent.service"
        state: touch
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0664"
      when: not ssh_agent_service.stat.exists

    - name: Create ssh-agent.service unit ansible.builtin.file
      ansible.builtin.blockinfile:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/ssh-agent.service"
        block: |
          [Unit]
          Description=SSH key ssh-agent

          [Service]
          Type=forking
          Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
          ExecStart=/usr/bin/ssh-agent -a $SSH_AUTH_SOCK

          [Install]
          WantedBy=default.target
      when: not ssh_agent_service.stat.exists

    - name: Enable ssh-agent service
      ansible.builtin.systemd:
        name: ssh-agent.service
        daemon_reload: true
        enabled: true
        scope: user

    - name: Check if tmux plugin manager is installed
      ansible.builtin.stat:
        path: "/home/{{ ansible_user_id }}/.tmux/plugins/tpm"
      register: tpm_path

    - name: Create directory for tpm plugins
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.tmux/plugins"
        mode: "0775"
        state: directory
      when: not tpm_path.stat.exists

    - name: Install tmux plugin manager
      ansible.builtin.git:
        repo: "https://github.com/tmux-plugins/tpm.git"
        dest: "/home/{{ ansible_user_id }}/.tmux/plugins/tpm"
      when: not tpm_path.stat.exists

    - name: Check if VictorMono font is present
      ansible.builtin.stat:
        path: "/home/{{ ansible_user_id }}/.local/share/fonts/VictorMonoNerdFontPropo-Regular.ttf"
      register: victormono

    - name: Install VictorMono font if not present
      when: not victormono.stat.exists
      block:
        - name: Create directory for fonts
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.local/share/fonts/"
            state: directory
            mode: "0775"
            owner: "{{ ansible_user_id }}"

        - name: Get Victor Mono Font
          ansible.builtin.get_url:
            url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/VictorMono.zip
            dest: /tmp/VictorMono.zip
            owner: "{{ ansible_user_id }}"
            mode: "0640"

        - name: Unarchive Victor Mono Font
          ansible.builtin.unarchive:
            src: /tmp/VictorMono.zip
            dest: "/home/{{ ansible_user_id }}/.local/share/fonts/"
          args:
            creates: "/home/{{ ansible_user_id }}/.local/share/fonts/VictorMonoNerdFontPropo-Regular.ttf"
          notify: Update font cache

        - name: Remove downloaded archive
          ansible.builtin.file:
            path: "/tmp/VictorMono.zip"
            state: absent

    - name: Configure TUI pinentry
      block:
        - name: Check if gpg-agent.conf is present
          ansible.builtin.stat:
            path: "/home/{{ ansible_user_id }}/.gnupg/gpg-agent.conf"
          register: gpg_agent_conf

        - name: Create ~/.gnupg directory
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.gnupg"
            state: directory
            owner: "{{ ansible_user_id }}"
            mode: "0750"
          when: not gpg_agent_conf.stat.exists

        - name: Create gpg-agent.conf
          ansible.builtin.file:
            path: "/home/{{ ansible_user_id }}/.gnupg/gpg-agent.conf"
            state: touch
            owner: "{{ ansible_user_id }}"
            mode: "0640"
          when: not gpg_agent_conf.stat.exists

        - name: Put pinentry configuration
          ansible.builtin.lineinfile:
            path: "/home/{{ ansible_user_id }}/.gnupg/gpg-agent.conf"
            line: pinentry-program /usr/bin/pinentry-curses
            state: present
          ignore_errors: "{{ ansible_check_mode }}"

    - name: Enable fstrim
      become: true
      ansible.builtin.service:
        name: fstrim.timer
        enabled: true
        state: started

  handlers:
    - name: Update font cache
      ansible.builtin.command: fc-cache
      changed_when: true
