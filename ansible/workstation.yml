---
- hosts: localhost
  vars:
    user_bin: /home/{{ ansible_user_id }}/bin
    is_laptop: false
    main_monitor: "DP-1"
    secondary_monitor: "DVI-I-1"
    with_nvchad: true

  tasks:
    - name: Current distr
      ansible.builtin.debug:
        var: ansible_distribution

    - name: Update repos
      become: yes
      ansible.builtin.command: "pacman -Sy"
      changed_when: true
      when: ansible_distribution == "Archlinux"

    - name: Update Ubuntu repos
      become: yes
      ansible.builtin.command: "apt update"
      changed_when: true
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Install Base utils
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - fish
        - neovim
        - tmux
        - git
        - ranger
        - cmake
        - clang
        - gcc
        - make
        - unbound
        - flatpak
        - keepass
        - ctags
        - curl
        - bat
        - sakura
        - mupdf
        - vifm
        - plank
        - sxiv
        - cryptsetup
        - exa
        - openvpn
        - lsd
        - rofi
        - polybar
        - nitrogen    # wallpaper manager
        - emacs
        - lxappearance
        - tealdeer

    - name: Install for other than SuSe
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - kitty
        - wipe
        - dnsutils        # dig etc.
        - gnome-tweaks
      when: ansible_distribution != "openSUSE Leap"

    - name: Install SUSE utils
      become: yes
      community.general.zypper:
        name: [
          'bind-utils',
          'the_silver_searcher',
          'chromium',
          'wireshark',
          'wireshark-ui-qt',
          'bookworm',
          'python3-neovim',
          'vifm-colors'
        ]
        state: present
      when: ansible_distribution == "openSUSE Leap"

    - name: Enable unbound
      ansible.builtin.service:
        name: unbound
        enabled: yes

    - name: Install Arch utils
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - bookworm
        - brave-browser
        - broot
        - chromium
        - code                    # VS Code
        - fd                      # alternative to 'find'
        - i3-gaps
        - ttf-fira-code
        - python-neovim
        - python-pip
        - siji                    # icon font
        - the_silver_searcher
        - ttf-font-icons
        - ttf-unifont
        - wireshark-qt
        - yay
        - zathura
        - zathura-pdf-mupdf
      when: ansible_distribution == "Archlinux"

    - name: Install Synaptic driver
      become: yes
      ansible.builtin.package:
        name: xf86-input-synaptics
        state: present
      when: is_laptop

    - name: Install Ubuntu and Debian utils
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - silversearcher-ag
        - wireshark
        - fonts-firacode
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Install Debian utils
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - chromium
      when: ansible_distribution == "Debian"

    - name: Install Ubuntu utils
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - chromium-browser
      when: ansible_distribution == "Ubuntu"

    - name: Enable some copr repos for Fedora
      ansible.builtin.command: dnf -y copr enable evana/fira-code-fonts
      become: yes
      when: ansible_distribution == "Fedora"

    - name: Install Fedora utils
      become: yes
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      with_items:
        - the_silver_searcher
        - wireshark
        - chromium
        - fira-code-fonts
        - i3
        - unifont
      when: ansible_distribution == "Fedora"

      # For Fedora:
      # install rpmfusion
      # install ffmpeg-libs

    - name: Install old vim system
      block:
        - name: Create .vim directory
          ansible.builtin.file:
            path: /home/{{ ansible_user_id }}/.vim/bundle
            state: directory
            owner: "{{ ansible_user_id }}"
            mode: 0700

        - name: Install Vundle
          git:
            repo: "https://github.com/VundleVim/Vundle.vim.git"
            dest: "/home/{{ ansible_user_id }}/.vim/bundle/Vundle.vim"
      when: not with_nvchad

    - name: Install oh-my.fish
      ansible.builtin.shell: "curl -L https://get.oh-my.fish | fish"
      args:
        creates: /home/{{ ansible_user_id }}/.oh-my-zsh
      tags: ['never', 'omf']

    - name: Clone fzf from git
      ansible.builtin.git:
        repo: "https://github.com/junegunn/fzf.git"
        dest: "/home/{{ ansible_user_id }}/.fzf"
        depth: 1

    - name: Install fzf
      ansible.builtin.command: "/home/{{ ansible_user_id }}/.fzf/install --all"
      args:
        creates: "/home/{{ ansible_user_id }}/.config/fish/functions/fish_user_key_bindings.fish"

    - name: Install node.js repo
      become: yes
      shell: "curl -sL https://deb.nodesource.com/setup_12.x | bash -"
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Create local bin
      ansible.builtin.file:
        path: "{{ user_bin }}"
        state: directory
        owner: "{{ ansible_user_id }}"

    - name: Install node.js
      become: yes
      package:
        name: nodejs,npm
        state: present
      when: ansible_distribution != "openSUSE Leap"

    - name: Install node.js in SUSE
      become: yes
      package:
        name: ['nodejs10', 'npm10']
        state: present
      when: ansible_distribution == "openSUSE Leap"

    - name: Set npm prefix
      ansible.builtin.command: "npm config set prefix ~/npm"

    - name: Check if ~/bin is in path
      ansible.builtin.command: "echo $PATH"
      register: path_contents
      changed_when: false
      tags: ["never", "after_install"]

    - name: Update fish path
      ansible.builtin.command: "set -U fish_user_paths $fish_user_paths /home/{{ ansible_user_id }}/bin"
      when: user_bin not in path_contents.stdout
      tags: ["never", "after_install"]

    - name: install global npm modules
      npm:
        name: "{{ item }}"
        global: yes
      with_items:
        - yarn
        - stylus
        - prettier

    - name: Change default shell to fish
      become: yes
      ansible.builtin.command: "chsh -s /usr/bin/fish {{ ansible_user_id }}"
      when: ansible_distribution != "Fedora"

    - name: Change default shell to fish
      become: yes
      ansible.builtin.command: "usermod --shell /bin/fish {{ ansible_user_id }}"
      when: ansible_distribution == "Fedora"

    - name: Get Powerline fonts
      get_url:
        url: "https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf"
        dest: "/usr/share/fonts/X11/misc/PowerlineSymbols.otf"
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Update font cache
      ansible.builtin.command: "fc-cache -vf /usr/share/fonts/X11/misc/"
      changed_when: true
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Create fontconfig directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/fontconfig/conf.d"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0775"
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Download fontconfig for powerline fonts
      get_url:
        url: "https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf"
        dest: "/home/{{ ansible_user_id }}/.config/fontconfig/conf.d/10-powerline-symbols.conf"
      when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

    - name: Get Victor Mono Font
      unarchive:
        src: ansible.builtin.files-workstation/VictorMono.zip
        dest: "/home/{{ ansible_user_id }}/.local/share/fonts/"
      args:
        creates: "/home/{{ ansible_user_id }}/.local/share/fonts/Victor Mono Regular Nerd Font Complete Mono.ttf"

    - name: Check if NvChad is installed
      ansible.builtin.stat:
        path: /home/pixelduck/.config/nvim/lua/core
      register: nvchad_dir_path
      when: with_nvchad

    - name: Clone NvChad to nvim config directory
      git:
        repo: "https://github.com/NvChad/NvChad"
        dest: "/home/{{ ansible_user_id }}/nvim/"
        depth: 1
      when: not nvchad_dir_path.stat.exists and with_nvchad

    - name: Create dotfiles directories
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/{{ item }}"
        state: directory
        owner: "{{ ansible_user_id }}"
      with_items:
        - "fish"
        - "fish/conf.d"
        - "i3"
        - "kitty"
        - "nvim"
        - "nvim/lua/custom"
        - "nvim/lua/custom/configs"
        - "polybar"
        - "rofi"
        - "tmux"
        - "vifm"

    - name: Get dotfiles
      git:
        repo: 'https://github.com/droptune/dotfiles.git'
        dest: '/home/{{ ansible_user_id }}/code/dotfiles-install'

    - name: Copy dotfiles
      ansible.builtin.copy:
        src: "/home/{{ ansible_user_id }}/code/dotfiles-install/{{ item }}"
        dest: "/home/{{ ansible_user_id }}/{{ item }}"
        owner: "{{ ansible_user_id }}"
        mode: 0640
      with_items:
        - ".config/fish/conf.d/my.fish"
        - ".config/fish/functions/mkcd.fish"
        - ".config/fish/functions/t.fish"
        - ".config/fish/functions/vf.fish"
        - ".config/i3/app-icons.json"
        - ".config/i3/config"
        - ".config/kitty/kitty.conf"
        - ".config/nvim/lua/custom/chadrc.lua"
        - ".config/nvim/lua/custom/init.lua"
        - ".config/nvim/lua/custom/mappings.lua"
        - ".config/nvim/lua/custom/plugins.lua"
        - ".config/nvim/lua/custom/configs/lspconfig.lua"
        - ".config/nvim/lua/custom/configs/null-ls.lua"
        - ".config/nvim/lua/custom/configs/rust-tools.lua"
        - ".config/rofi/config.rasi"
        - ".config/tmux/tmux-theme.tmux"
        - ".config/tmux/tmux.conf"
        - ".config/vifm/vifmrc"
        - ".gitconfig"

    - name: Copy templated dotfiles
      ansible.builtin.template:
        src: "/home/{{ ansible_user_id }}/code/dotfiles-install/ansible/templates/{{ item.src }}"
        dest: "/home/{{ ansible_user_id }}/{{ item.dest }}"
        owner: "{{ ansible_user_id }}"
        mode: 0640
      with_items:
        - src: "polybar.ini.j2"
          dest: ".config/polybar/config.ini"

    - name: Copy executable files
      ansible.builtin.template:
        src: "/home/{{ ansible_user_id }}/code/dotfiles-install/ansible/templates/{{ item.src }}"
        dest: "/home/{{ ansible_user_id }}/{{ item.dest }}"
        owner: "{{ ansible_user_id }}"
        mode: 0740
      with_items:
        - src: "polybar.sh.j2"
          dest: ".config/polybar/launch.sh"

    - name: Copy executable ansible.builtin.files for laptop
      ansible.builtin.copy:
        src: "/home/{{ ansible_user_id }}/code/dotfiles/{{ item }}"
        dest: "/home/{{ ansible_user_id }}/{{ item }}"
        owner: "{{ ansible_user_id }}"
        mode: 0740
      with_items:
        - "bin/external_display.sh"
        - "bin/tp.sh"
      when: is_laptop

    # VisualStudio Code for Fedora and openSUSE
    - name: Install MS VS Code repository signature
      ansible.builtin.command: rpm --import https://packages.microsoft.com/keys/microsoft.asc
      become: yes
      when: ansible_distribution == "Fedora" or ansible_distribution == "openSUSE Leap"

    - name: Enable MS VS Code repo
      ansible.builtin.command: sudo zypper ar https://packages.microsoft.com/yumrepos/vscode vscode
      become: yes
      when: ansible_distribution == "openSUSE Leap"

    - name: Check if VS Code repo is config is present
      ansible.builtin.stat:
        path: /etc/yum.d/repos.d/vscode.repo
      changed_when: no
      register: vscode_repo
      when: ansible_distribution == "Fedora"

    - name: Create MS VS Code repo ansible.builtin.file
      ansible.builtin.command: sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
      become: yes
      when: ansible_distribution == "Fedora" and not vscode_repo.stat.exists

    - name: Install MS VS Code in Fedora
      become: yes
      ansible.builtin.dnf:
        name=code state=present update_cache=yes
      when: ansible_distribution == "Fedora"

    - name: Install MS VS Code in SUSE
      become: yes
      zypper: name=code state=present update_cache=yes
      when: ansible_distribution == "openSUSE Leap"

    - name: Create dir for photon Rofi theme
      become: yes
      ansible.builtin.file:
        path: /usr/share/rofi/themes/photon
        state: directory
        mode: 0755

    - name: Install Rofi Themes
      become: yes
      ansible.builtin.git:
        repo: "https://github.com/anstellaire/photon-rofi-themes"
        dest: "/usr/share/rofi/themes/photon/"

    - name: Install i3-workspace-names-daemon
      ansible.builtin.pip:
        name: i3-workspace-names-daemon
        extra_args: --user

    - name: Check if ssh-agent.service ansible.builtin.file exists
      ansible.builtin.stat:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/ssh-agent.service"
      register: ssh_agent_service

    - name: Create local config directory for systemd
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: 0664
      when: not ssh_agent_service.stat.exists

    - name: Touch ssh-agent.service ansible.builtin.file
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/ssh-agent.service"
        state: touch
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: 0664
      when: not ssh_agent_service.stat.exists

    - name: Create ssh-agent.service unit ansible.builtin.file
      ansible.builtin.blockinfile:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/ssh-agent.service"
        block: |
          [Unit]
          Description=SSH key ssh-agent

          [Service]
          Type=forking
          Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
          ExecStart=/usr/bin/ssh-agent -a $SSH_AUTH_SOCK

          [Install]
          WantedBy=default.target

    - name: Enable ssh-agent service
      ansible.builtin.systemd:
        name: ssh-agent.service
        daemon_reload: yes
        enabled: yes
        scope: user
